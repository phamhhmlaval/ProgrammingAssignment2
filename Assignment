## Cache the Inverse Matrix
## Time consuming to calculate the inverse of a matrix
## This function creates a special matrix that can be cache its inverse

makeCacheMatrix <- function(x = matrix()) {
  inv <- NULL
  set <- function(y) {
    x <<- y
    inv <<- NULL
  }
  get <- function() x
  setInverse <- function(inverse) inv <<- inverse
  getInverse <- function() inv
  list(set = set,
       get = get,
       setInverse = setInverse,
       getInverse = getInverse)
}

## This function computes the inverse of the special "matrix" created by 
## makeCacheMatrix above. 
## The function will check if the inverse has already calculated and retrieve it without computing it.
## Otherwise, it will compute the inverse matrix.

cacheSolve <- function(x, ...) {
  
  inv <- x$getInverse()
  if (!is.null(inv)) {
    message("getting cached data")
    return(inv)
  }
  mat <- x$get()
  inv <- solve(mat, ...)
  x$setInverse(inv)
  inv
}

### Test

new_matrix <- makeCacheMatrix(matrix(c(2,3,2,5,7,5,8,6,2),3,3))
new_matrix$get()
new_matrix$getInverse()
cacheSolve(new_matrix)
